using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
 



namespace PDK1API
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // services.AddControllers();

            services.AddCors(options =>
            {
                options.AddDefaultPolicy(builder =>
                {
                    builder
                    .WithOrigins("https://*.kkfnets.com", "http://*.kkfnets.com")
                    .SetIsOriginAllowedToAllowWildcardSubdomains()
                    .AllowAnyHeader()
                    .AllowCredentials()
                    .WithMethods("GET", "PUT", "POST", "DELETE");
                });
                options.AddPolicy("AllowCorsDev", builder =>
                {
                    builder
                    .WithOrigins("http://localhost:8080")
                    .AllowAnyHeader()
                    .AllowCredentials()
                    .WithMethods("GET", "PUT", "POST", "DELETE");
                });
                 
            });
       
         // services.AddWebSocketManager();
         //   services.AddHostedService<JobService>();
            services.AddControllersWithViews().AddNewtonsoftJson();


        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env. IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                //  app.UseCors("AllowCorsDev");
                app.UseHsts();
            }

            if (env.IsProduction())
            {
                app.UseHsts();
            }
            else {
                 app.UseCors("AllowCorsDev");
               
            }


            var _SetDB = "";
            if (Configuration["UseDB"] == "0")// 0 จริง 1 สำรอง   
            {
                _SetDB = Configuration["UseBRN"];
                _SetDB = _SetDB + "DB_Connect";

            }
            else
            {
                _SetDB = Configuration["UseBRN"];
                _SetDB = _SetDB + "DBBak_Connect";
            }
            //LocalDB_connect:Mssql:facescan

            PDK1ADO.Connect.DBase.Product.ProductDBase.conString    = Configuration[_SetDB + ":DBase:product"];

            PDK1ADO.Connect.Mssql.Product.ProductBase.conString     = Configuration[_SetDB + ":Mssql:product"];
            PDK1ADO.Connect.Mssql.Centraldb.CentraldbBase.conString = Configuration[_SetDB + ":Mssql:centraldb"];

            PDK1ADO.Connect.Oracle.HrmsV10.HrmsV10Base.conString = Configuration[_SetDB + ":Oracle:HrmsV10"];


            var wsOptions = new WebSocketOptions
            {
                KeepAliveInterval = TimeSpan.FromSeconds(60),
                ReceiveBufferSize = 6 * 1024
            };

           

            app.UseCors();

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseWebSockets(wsOptions);


            //  app.MapWebSocketManager("/socket", serviceProvider.GetService<SocketHandler>());



            //  app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
